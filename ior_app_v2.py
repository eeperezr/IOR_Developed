# ior_app.py

import streamlit as st

# ----- Diccionario de tecnolog√≠as IOR -----

ior_techs = {
    "Inyecci√≥n de CO‚ÇÇ": {
        "tipo": "Gas",
        "descripcion": "Se inyecta CO‚ÇÇ en el yacimiento para reducir la viscosidad del crudo y mejorar su movilidad.",
        "implementacion": ["EE. UU. (Permian Basin)", "Canad√°", "Emiratos √Årabes"]
    },
    "Inyecci√≥n de Vapor (Steamflooding)": {
        "tipo": "T√©rmica",
        "descripcion": "Se inyecta vapor para calentar el crudo y hacerlo m√°s fluido, facilitando su extracci√≥n.",
        "implementacion": ["California", "Venezuela", "Canad√°"]
    },
    "Combusti√≥n In Situ (ISC)": {
        "tipo": "T√©rmica",
        "descripcion": "Se quema una parte del crudo dentro del yacimiento para generar calor y reducir viscosidad.",
        "implementacion": ["India", "Rusia", "Venezuela"]
    },
    "Inyecci√≥n de Pol√≠meros": {
        "tipo": "Qu√≠mica",
        "descripcion": "Se agregan pol√≠meros al agua inyectada para aumentar su viscosidad y mejorar el barrido del petr√≥leo.",
        "implementacion": ["China", "Canad√°", "Argentina"]
    },
    "ASP (Alcalino-Surfactante-Pol√≠mero)": {
        "tipo": "Qu√≠mica",
        "descripcion": "Combinaci√≥n de agentes qu√≠micos para reducir la tensi√≥n interfacial y mejorar la movilidad del crudo.",
        "implementacion": ["China", "India", "EE. UU."]
    },
    "Microbiana (MEOR)": {
        "tipo": "Biol√≥gica",
        "descripcion": "Uso de microorganismos que generan gases o biosurfactantes para mejorar la recuperaci√≥n.",
        "implementacion": ["India", "Rusia", "Proyectos piloto"]
    },
    "Nanotecnolog√≠a (emergente)": {
        "tipo": "Avanzada",
        "descripcion": "Aplicaci√≥n de nanopart√≠culas para alterar propiedades del crudo o del medio poroso.",
        "implementacion": ["EE. UU.", "Emiratos √Årabes", "Fase piloto"]
    },
}

# ----- Streamlit App -----

st.set_page_config(page_title="Selector de Tecnolog√≠a IOR", layout="centered")

st.title("üîç Selector de Tecnolog√≠a IOR")
st.markdown("Filtra por tipo y/o regi√≥n de implementaci√≥n para explorar tecnolog√≠as aplicadas a recuperaci√≥n mejorada de petr√≥leo.")

# Obtener lista √∫nica de tipos y regiones
tipos = sorted(set(data["tipo"] for data in ior_techs.values()))
regiones = sorted(set(region for data in ior_techs.values() for region in data["implementacion"]))

# Filtros
tipo_filtro = st.selectbox("üìÇ Filtrar por tipo de tecnolog√≠a:", ["Todos"] + tipos)
region_filtro = st.selectbox("üåç Filtrar por regi√≥n de implementaci√≥n:", ["Todas"] + regiones)

# Aplicar filtros
tecnologias_filtradas = {}

for nombre, data in ior_techs.items():
    cumple_tipo = (tipo_filtro == "Todos") or (data["tipo"] == tipo_filtro)
    cumple_region = (region_filtro == "Todas") or (region_filtro in data["implementacion"])
    if cumple_tipo and cumple_region:
        tecnologias_filtradas[nombre] = data

# Mostrar resultados
if tecnologias_filtradas:
    for nombre, data in tecnologias_filtradas.items():
        st.subheader(f"üìå {nombre}")
        st.markdown(f"**Tipo:** {data['tipo']}")
        st.markdown(f"**Descripci√≥n:** {data['descripcion']}")
        st.markdown("**Implementaci√≥n mundial:**")
        st.write("- " + "\n- ".join(data["implementacion"]))
        st.markdown("---")
else:
    st.warning("No se encontraron tecnolog√≠as que coincidan con los filtros seleccionados.")
